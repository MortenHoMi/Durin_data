---
title: "Droughtnet cleaning code"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(readr)
library(here)
#install.packages("here")

DURIN <- read_csv("../raw_data/DURIN_clean.csv", col_types = cols(calluna_shoot_type = col_factor(levels = c("Long", "Short"))),
                 guess_max = Inf)


droughtnet_data <- DURIN %>%
  filter(is.na(DURIN_plot))

droughtnet_data <- data %>%
  filter(project == "Field - Traits" & is.na(habitat))

```

**PART 1: ERROR IDENTIFICATION**

```{r}
#plant count per site
#Count the number of plants per site
(plant_count_per_site <- droughtnet_data %>%
  group_by(siteID) %>%
  summarise(plant_count = n()))

# Calculate the number of unique species per plot in each site
(species_count_per_plot_site <- droughtnet_data %>%
  group_by(siteID, DroughNet_plotID) %>%
  summarise(unique_species_count = n_distinct(species)))
view(species_count_per_plot_site)
# Calculate the total number of leaves for each species in both sites
(count_per_species <- droughtnet_data %>%
  group_by(siteID, species) %>%
  summarise(total_leaves = sum(leaf_nr, na.rm = TRUE)))

#check for missing Drought treament
# Extract envelope_ID values with missing DroughtTrt
(envelopes_missing_droughttrt <- droughtnet_data %>%
  filter(is.na(DroughtTrt)) %>%
  pull(envelope_ID) %>%
  unique())
# 2 missing drought treatment

##does the treatment match with the DroughtNet_plotID( to check if the treatment is unique to a single plot
# Group by DroughNet_plotID and siteID, then count unique DroughtTrt values
treatment_uniqueness <- droughtnet_data %>%
  group_by(DroughNet_plotID, siteID) %>%
  summarise(unique_treatments = n_distinct(DroughtTrt))

# Check if any group has more than one unique treatment
(non_unique_treatments <- treatment_uniqueness %>%
  filter(unique_treatments > 1))
#found that 1.2 Tjøtta, 1.3 Tjøtta 2.2 Tjøtta, 2.1 Lgyra have more than one unique treatment

# Extract rows from the droughtnet dataset based on non-unique treatments
non_unique_treatment_rows <- droughtnet_data %>%
  semi_join(non_unique_treatments, by = c("DroughNet_plotID", "siteID")) %>%
  select(envelope_ID, species, DroughNet_plotID, DroughtTrt, siteID)

# Display the extracted rows
view(non_unique_treatment_rows)
# Filter for only Lygra's 2.1 plot from non_unique_treatment_rows
lygra_2_1_rows <- non_unique_treatment_rows %>%
    filter(siteID == "Lygra" & DroughNet_plotID == "2.1")
view(lygra_2_1_rows)
# AEG7270 has Amb(0) treatment, the rest are extreme, registered in RD4
# Filter for only Tjøtta's 2.2 plot from non_unique_treatment_rows
tjøtta_2_2_rows <- non_unique_treatment_rows %>%
    filter(siteID == "Tjøtta" & DroughNet_plotID == "2.2")
view(tjøtta_2_2_rows)
# EEN3300 has Amb(0) treatment, the rest are extreme, REGISTERED IN RD4
# Filter for only Tjøtta's 1.3 plot from non_unique_treatment_rows

tjøtta_1_3_rows <- non_unique_treatment_rows %>%
    filter(siteID == "Tjøtta" & DroughNet_plotID == "1.3")
view(tjøtta_1_3_rows)
# verify again when checking age class seems 1.3 plot is found in both pioneer and mature stages
#verified same plot number in pioneer and matur

# Filter for only Tjøtta's 1.2 plot from non_unique_treatment_rows
tjøtta_1_2_rows <- non_unique_treatment_rows %>%
    filter(siteID == "Tjøtta" & DroughNet_plotID == "1.2")
view(tjøtta_1_2_rows)
#check again later, seems 1.2 is both in pioneer and mature hence more than 1 unique treatment
#verified, same plot number in both age classes

#rows missing age class in the data set
ageClass_missing <- droughtnet_data %>%
  filter(is.na(ageClass)) %>%
  select(envelope_ID, ageClass)
view(ageClass_missing)
#no envelope ids with missing ageClass

#checking for exceeding envelope count per plant
# Calculate envelope counts and gather envelope IDs
# Specify the month and site for Calluna vulgaris
selected_month <- "September"  #to avoid counting calluna sampled in june
selected_site_for_calluna <- "Lygra"
envelope_details <- droughtnet_data %>%
  # Apply filter conditions for all species and add specific conditions for Calluna vulgaris
  filter(
    (species %in% c("Vaccinium myrtillus", "Empetrum nigrum", "Vaccinium vitis_idaea") & siteID %in% c("Lygra", "Tjøtta")) |
    (species == "Calluna vulgaris" & siteID == selected_site_for_calluna & month == selected_month)
  ) %>%
  group_by(species, siteID, DroughNet_plotID, plant_nr, ageClass) %>%
  group_by(species, siteID, month, DroughNet_plotID, plant_nr, ageClass) %>%
  summarise(
    envelope_count = n_distinct(envelope_ID),
    envelope_ids = list(envelope_ID),
    .groups = 'drop'
  ) %>%
  mutate(expected_count = case_when(
    species == "Vaccinium myrtillus" ~ 3,
    species %in% c("Vaccinium vitis_idaea", "Empetrum nigrum", "Calluna vulgaris") ~ 6,
    TRUE ~ NA_integer_
  ))
# Filter for cases where the envelope count exceeds the expected count, specifically for each species
incorrect_envelope_details <- envelope_details %>%
  filter((species == "Vaccinium myrtillus" & envelope_count > 3) | 
         (species == "Calluna vulgaris" & envelope_count > 6) |
         (species == "Empetrum nigrum" & envelope_count > 6) |
         (species == "Vaccinium vitis-idaea" & envelope_count > 6))
View(incorrect_envelope_details)
# Expand the envelope_ids column to display all barcodes for the incorrect cases
expanded_envelope_ids <- incorrect_envelope_details %>%
  unnest(envelope_ids)
View(expanded_envelope_ids)
# found incorrect envelope count,not registered yet in rd4 checks
#solution- to check the envelOpes    
# no exceeding envelope IDs
#checking for multiple heights in Calluna vulgaris specifically Lygra
    # Filter for Calluna vulgaris, group by plant_nr and plant_height, and gather envelope_IDs
    calluna_heights_and_envelopes <- droughtnet_data %>%
      filter(species == "Calluna vulgaris", siteID == "Lygra") %>%  
      group_by(siteID, DroughNet_plotID, plant_nr, plant_height) %>%
      summarise(
        envelope_count = n(),
        envelope_ids = list(envelope_ID)
      )
# Filter to only include rows where there's more than one height for the same plant
    multiple_heights_calluna <- calluna_heights_and_envelopes %>%
      group_by(siteID, DroughNet_plotID, plant_nr) %>%
      filter(n() > 1) %>%
      ungroup()
    view(multiple_heights_calluna)

    expanded_calluna <- multiple_heights_calluna %>% #expanded the envelope_ID collumn to display all the barcodes
      unnest(envelope_ids)
    view(expanded_calluna)
# a good number of the plants with multiple heights-documented already in rd4 checks
# Filter for Calluna vulgaris sampled in September
calluna_heights_and_envelopes <- droughtnet_data %>%
  filter(species == "Calluna vulgaris", 
         siteID == "Lygra", 
         month == 9) %>%  
  group_by(siteID, DroughNet_plotID, plant_nr, plant_height) %>%
  summarise(
    envelope_count = n(),
    envelope_ids = list(envelope_ID),
    .groups = 'drop'  # This ensures that the resulting tibble is ungrouped
  )
view(calluna_heights_and_envelopes )
#no multiple heights in drought
#multiple heights only found when we include June

#checking calluna short or long shoot type
# Get unique values of calluna_shoot_type for "Calluna vulgaris" in "Lygra"
unique_values <- droughtnet_data %>%
  filter(species == "Calluna vulgaris", siteID == "Lygra") %>%
  pull(calluna_shoot_type) %>%
  unique()
view(unique_values)
#filter calluna with missing shoot type
missing_shoot_type <- droughtnet_data %>%
  filter(species == "Calluna vulgaris", month == "September") %>%
  group_by(envelope_ID) %>%
  filter(is.na(calluna_shoot_type) | !(calluna_shoot_type %in% c("Short", "Long")))
View(missing_shoot_type %>% select(envelope_ID, calluna_shoot_type))
# 0 CV missing shoot type

#check leaf age, young and old for EN and vv
#check missing leaf age in VV and EN
missing_leaf_age <- droughtnet_data %>%
  filter(species %in% c("Empetrum nigrum", "Vaccinium vitis-idaea")) %>%  # Filter for both species
  filter(is.na(leaf_age))  # Filter out rows with missing leaf age
view(missing_leaf_age %>% select(envelope_ID, species, leaf_age))
#no entries missing leaf ages
```

**PART 2: SOLUTUONS**

```{r}

# Update drought treatment
# Use mutate with case_when to update the drought treatment
droughtnet_data <- droughtnet_data %>%
  mutate(
    DroughtTrt = case_when(
      envelope_ID == "EEN3300" ~ "Ext (90)",
      envelope_ID == "AEG7270" ~ "Ext (90)",
      envelope_ID == "ASE5767" ~ "Amb (0)",  
      envelope_ID == "AOR3423" ~ "Ext (90)", 
      TRUE ~ DroughtTrt  # Keeps existing values for all other cases
    )
  )
view(droughtnet_data)

#add "north_south" and "coastal_inland" columns to describe the experimental set-up

droughtnet_data<- droughtnet_data %>% 
  mutate(north_south = factor(siteID, levels = c("Lygra", "Sogndal", "Senja", "Tjøtta", "Kautokeino"),
                              labels = c("South", "South", "North", "North", "North"))) %>% 
  mutate(coast_inland = factor(siteID, levels = c("Lygra", "Tjøtta", "Senja", "Sogndal", "Kautokeino"),
                              labels = c("Coastal", "Coastal", "Coastal", "Inland", "Inland"))) %>%
  select(...1, envelope_ID, day, month, year, siteID, north_south, coast_inland, everything())

# # Filter the dataset to include only rows where 'DroughtTrt' is not missing
# droughtnet_data <- droughtnet_data %>% filter(!is.na(DroughtTrt))

# Calculate mean thickness for each row, removing NAs in the calculation
mean_thickness <- rowMeans(droughtnet_data[, c("leaf_thickness_1_mm", "leaf_thickness_2_mm", "leaf_thickness_3_mm")], na.rm = TRUE)

# Add the mean_thickness column directly after leaf_thickness_3_mm without using within()
droughtnet_data$mean_thickness <- NA  # Initialize the column to ensure it exists
col_index <- which(names(droughtnet_data) == "leaf_thickness_3_mm") + 1  # Find the position right after leaf_thickness_3_mm
# Rearrange columns to insert thickness at the correct position
droughtnet_data <- droughtnet_data[, c(1:(col_index-1), ncol(droughtnet_data), (col_index):(ncol(droughtnet_data)-1))]
#  assign the calculated mean thickness values to the new column
droughtnet_data$mean_thickness <- mean_thickness

# Standardize the DroughtTrt column
droughtnet_data$DroughtTrt <- gsub("Ext\\(90\\)", "Ext (90)", droughtnet_data$DroughtTrt)
droughtnet_data$DroughtTrt <- gsub("Amb\\(0\\)", "Amb (0)", droughtnet_data$DroughtTrt)

# note that We had an issue with the plots 7.1 and 7.3, where there appeared to be a mismatch between the heights recorded on the field sheets and those on the data sheet. After thorough discussions, we decided to take no action because we trust the information that was transferred from the zipper-lock bags to the envelopes, and subsequently to the data sheet, more than the field notes.


#inspection of the data also showed overlapping plot ids
# the data has overlap naming system in the DroughNet_plotID for Tjøtta and Lygra site
# Reassign DroughNet_plotID values based on specified rules for Tjøtta and Mature
#reassigning will use Siri's original plot numbers 
droughtnet_data <- droughtnet_data %>%
  mutate(DroughNet_plotID = as.character(DroughNet_plotID),  # Ensure it's character
         DroughNet_plotID = case_when(
           siteID == "Tjøtta" & ageClass == "Mature" & DroughNet_plotID == "1.2" ~ "16.2",
           siteID == "Tjøtta" & ageClass == "Mature" & DroughNet_plotID == "1.3" ~ "16.3",
           siteID == "Tjøtta" & ageClass == "Mature" & DroughNet_plotID == "2.1" ~ "17.1",
           siteID == "Tjøtta" & ageClass == "Mature" & DroughNet_plotID == "2.2" ~ "17.2",
           siteID == "Tjøtta" & ageClass == "Mature" & DroughNet_plotID == "3.1" ~ "18.1",
           siteID == "Tjøtta" & ageClass == "Mature" & DroughNet_plotID == "3.2" ~ "18.2",
           TRUE ~ DroughNet_plotID  # Keep original ID for all other cases
         ))

# Update DroughNet_plotID values for Tjøtta and Pioneer based on specified rules
droughtnet_data_final <- droughtnet_data %>%
  mutate(DroughNet_plotID = case_when(
    siteID == "Tjøtta" & ageClass == "Pioneer" & DroughNet_plotID == "1.2" ~ "10.2",
    siteID == "Tjøtta" & ageClass == "Pioneer" & DroughNet_plotID == "1.3" ~ "10.3",
    siteID == "Tjøtta" & ageClass == "Pioneer" & DroughNet_plotID == "2.2" ~ "11.2",
    siteID == "Tjøtta" & ageClass == "Pioneer" & DroughNet_plotID == "2.3" ~ "11.3",
    siteID == "Tjøtta" & ageClass == "Pioneer" & DroughNet_plotID == "3.2" ~ "12.2",
    siteID == "Tjøtta" & ageClass == "Pioneer" & DroughNet_plotID == "3.3" ~ "12.3",
    TRUE ~ as.character(DroughNet_plotID) 
  ))

# Remove the specified columns from the DataFrame
columns_to_remove <- c("habitat", "plotNR", "DURIN_plot", "stomatal_conductance.gs.", "spectrometry", "cutout_barcode", "new_taxon", "flag", "remark_dry_weighing", "notes", "flag_DryMass", "remarks_2", "remark")
droughtnet_data_final2 <- select(droughtnet_data_final, -all_of(columns_to_remove))


write.csv(droughtnet_data_final2, "droughtnet_data_cleaned_final.csv", row.names = FALSE)
```
